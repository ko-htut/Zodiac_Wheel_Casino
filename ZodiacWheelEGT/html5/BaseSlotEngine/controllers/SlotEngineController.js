ViewController("SlotEngineController", {}, function () {
    function g() { this._winVisualizationViewController && (this._winVisualizationViewController.removeEventListener(WinVisualizationViewController.ENTER_FREESPINS_SCENARIO_COMPLETE, w, this), this.removeChildViewController(this._winVisualizationViewController), this._winVisualizationViewController.dispose(), this._winVisualizationViewController = null) } function x() {
        this._freespinAnimationViewController || (GameSettings.getInstance(), this._freespinAnimationViewController =
            new FreespinAnimationViewController, this._freespinAnimationViewController.addEventListener(FreespinAnimationViewController.START_PRESSED, y, this), this._freespinAnimationViewController.addEventListener(FreespinAnimationViewController.REFRESH_SCREEN, z, this), this._freespinAnimationViewController.addEventListener(FreespinAnimationViewController.INTRO_ENDED, A, this), this._freespinAnimationViewController.addEventListener(FreespinAnimationViewController.RETRIGGER_ENDED, B, this), this._freespinAnimationViewController.addEventListener(FreespinAnimationViewController.OUTRO_ENDED,
                C, this), this.addChildViewController(this._freespinAnimationViewController))
    } function m() {
        this._freespinAnimationViewController && (this.removeChildViewController(this._freespinAnimationViewController), this._freespinAnimationViewController.removeEventListener(FreespinAnimationViewController.START_PRESSED, y, this), this._freespinAnimationViewController.removeEventListener(FreespinAnimationViewController.REFRESH_SCREEN, z, this), this._freespinAnimationViewController.removeEventListener(FreespinAnimationViewController.INTRO_ENDED,
            A, this), this._freespinAnimationViewController.removeEventListener(FreespinAnimationViewController.RETRIGGER_ENDED, B, this), this._freespinAnimationViewController.removeEventListener(FreespinAnimationViewController.OUTRO_ENDED, C, this), this._freespinAnimationViewController.dispose(), this._freespinAnimationViewController = null)
    } function D() {
        var a = GameSettings.getInstance(), b = a.serverMessage; a.freespinGame && a.currFreespin == a.totalFreespins && (a.freespinGame = !1, a.currFreespin = 0, a.totalFreespins = 0, this._winVisualizationViewController &&
            this._winVisualizationViewController.stopWinSound(), x.call(this), SoundManager.getInstance().stop(this._freespinMusicSoundChannel), this._freespinAnimationViewController.setValueText(b.winAmount), this._freespinAnimationViewController.playOutro(), this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_FREESPINS_ANIMATION), this._reelsViewController.setMainFakeReels())
    } function l() {
        this._videoViewController || (this._videoViewController = new VideoViewController, this.addChildViewController(this._videoViewController),
            this._videoViewController.addEventListener(VideoViewController.EXPAND_COMPLETE, E, this), this._videoViewController.addEventListener(VideoViewController.CLEAR_CELLS, F, this), this._videoViewController.start())
    } function k(a) {
        this._videoViewController && (void 0 == a && (a = !0), this._videoViewController.removeEventListener(VideoViewController.EXPAND_COMPLETE, E, this), this._videoViewController.removeEventListener(VideoViewController.CLEAR_CELLS, F, this), this.removeChildViewController(this._videoViewController), this._videoViewController.dispose(),
            this._videoViewController = null, a && GameSettings.getInstance().transparentReels && this._reelsViewController.redrawReels())
    } function U() { this.dispatchEvent(new Event(SlotEngineMain.HIDE_GAME)) } function F(a) { GameSettings.getInstance().transparentReels && this._reelsViewController.clearReels(a.data.cells) } function G(a) {
        this._settingsViewController || (this._settingsViewController = new SettingsViewController(a), this._settingsViewController.addEventListener(SettingsView.BET_BUTTON_CLICK, H, this), this._settingsViewController.addEventListener(SettingsView.DENOM_BUTTON_CLICK,
            I, this), this._settingsViewController.addEventListener(SettingsView.LINE_BUTTON_CLICK, J, this), this._settingsViewController.addEventListener(SettingsView.PAYTABLE_BUTTON_CLICK, n, this), this._settingsViewController.addEventListener(SettingsView.SETTINGS_SHOWN, K, this), this._settingsViewController.addEventListener(SettingsView.SETTINGS_HIDDEN, L, this), this._settingsViewController.addEventListener(SettingsView.HELP_BUTTON_CLICK, p, this), this.addChildViewController(this._settingsViewController), this._uiViewController.setUIState(UserInterfaceViewController.STATE_SETTINGS_PAYTABLE),
            this._uiViewController.setZIndexesForSettingsShown(), this._uiViewController.activateSettingsButton(!0))
    } function q() {
        this._paytableViewController && (this._paytableViewController.removeEventListener(PaytableView.SETTINGS_BUTTON_CLICK, r, this), this._paytableViewController.removeEventListener(PaytableView.PAYTABLE_SHOWN, M, this), this._paytableViewController.removeEventListener(PaytableView.PAYTABLE_HIDDEN, N, this), this.removeChildViewController(this._paytableViewController), this._paytableViewController.dispose(),
            this._paytableViewController = null, this._uiViewController.activatePaytableButton(!1))
    } function O() {
        this._settingsViewController && (this._settingsViewController.removeEventListener(SettingsView.BET_BUTTON_CLICK, H, this), this._settingsViewController.removeEventListener(SettingsView.DENOM_BUTTON_CLICK, I, this), this._settingsViewController.removeEventListener(SettingsView.LINE_BUTTON_CLICK, J, this), this._settingsViewController.removeEventListener(SettingsView.PAYTABLE_BUTTON_CLICK, n, this), this._settingsViewController.removeEventListener(SettingsView.SETTINGS_SHOWN,
            K, this), this._settingsViewController.removeEventListener(SettingsView.SETTINGS_HIDDEN, L, this), this._settingsViewController.removeEventListener(SettingsView.HELP_BUTTON_CLICK, p, this), this.removeChildViewController(this._settingsViewController), this._settingsViewController.dispose(), this._settingsViewController = null, this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE), this._uiViewController.activateSettingsButton(!1), this._uiViewController.setZIndexesForSettingsHidden())
    } function s() {
        var a =
            GameSettings.getInstance(), b = a.serverMessage, c = b.expand.length; if (0 < c) { for (var d = 0; d < c; d += 2)b.reels[b.expand[d] * (a.numReelCards + 2) + b.expand[d + 1] + 1] = a.wildIndex; this._reelsViewController.setReels(b.reels) }
    } function h() { var a = GameSettings.getInstance(); this._totalsInfoView && (this._totalsInfoView.updateTotalBet(a.totalBet), this._totalsInfoView.updateTotalWin(a.totalWin)) } function f() {
        console.log("SPIN"); if (!this._lostConnection && !this._reelsViewController.getReelsRotating()) {
            q.call(this); O.call(this);
            var a = GameSettings.getInstance(); a.processingSubscribe = !1; a.noSoundAndFastLineBlink = !1; if (!this._freespinsStartPressed && a.freespinGame) this._freespinsStartPressed = !0, this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_FREESPINS_ANIMATION), this._freespinAnimationViewController.playIntro(); else {
                this._uiViewController.completeAnimations(); a.autoplayGame || a.freespinGame || SoundManager.getInstance().play("spinSound"); var b = a.serverMessage; this._collectReceived ? b.jackpot && !a.freespinGame ?
                    (this._stateMachineContext.collect(), this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_TRANSITION)) : a.customResult ? null != this._customResultViewController.getResult() && a.balance >= this.bet() && (b.state == BaseMessage.STATE_IDLE || b.state == BaseMessage.STATE_FREESPIN) ? (this._stateMachineContext.setResult(), this._startRequested = !0) : (b.state == BaseMessage.STATE_GAMBLE && (this._startRequested = !0), this._stateMachineContext.spin()) : (b.state == BaseMessage.STATE_GAMBLE && (this._startRequested =
                        !0), this._stateMachineContext.spin()) : (b = a.serverMessage, a.balance + b.winAmount >= this.bet() && (this.setWaitingForSpinResultVisualState(), this._startRequested = !0))
            }
        }
    } function V() { console.log("STOP"); this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_REELS_TO_STOP); this._reelsViewController.stopAll() } function t() {
        var a = GameSettings.getInstance(), b = a.serverMessage; b.state == BaseMessage.STATE_FREESPIN || b.jackpot || SoundManager.getInstance().play("stopAutoplaySound"); this._autoplayDelayTimer &&
            (clearTimeout(this._autoplayDelayTimer), this._autoplayDelayTimer = 0); a.autoplayGame = !1; this._uiViewController.setUIState(this._uiViewController.getUIState(), a.serverMessage.state == BaseMessage.STATE_GAMBLE)
    } function W() {
        console.log("COLLECT CLICK"); if (this._jackpotViewController) {
            var a = GameSettings.getInstance(), b = a.balance > this._uiViewController.balanceMoney(); this._uiViewController.setWinMoney(0, b, 1); this._uiViewController.setBalanceMoney(a.balance, b, 1); a = SoundManager.getInstance(); this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_TRANSITION);
            this._jackpotComplete = !0; this._jackpotWinSoundChannel = a.stop(this._jackpotWinSoundChannel); this._jackpotWinSoundRequested = !1; a.play("collectSound")
        } else this._stateMachineContext.getState() == StateMachineContext.STATE_WIN ? this._uiViewController.getWinMoneyAnimating() ? this._uiViewController.completeAnimations() : (this._stateMachineContext.collect(), SoundManager.getInstance().play("collectSound")) : this._stateMachineContext.getState() == StateMachineContext.STATE_GAMBLE ? this._stateMachineContext.collect() :
            this._stateMachineContext.getState() == StateMachineContext.STATE_IDLE && (this.setIdleVisualState(), SoundManager.getInstance().play("collectSound"))
    } function X() { console.log("GAMBLE CLICK"); this._stateMachineContext.gamble() } function P(a) { console.log("GAMBLE CHOICE", a.data.type); GameSettings.getInstance().gambleChoice = a.data.type; this._stateMachineContext.gamble() } function Q() { this._stateMachineContext.jackpot() } function n() {
        this._paytableViewController ? this._paytableViewController.hide() : this._paytableViewController ||
            (this._paytableViewController = new PaytableViewController, this._paytableViewController.addEventListener(PaytableView.SETTINGS_BUTTON_CLICK, r, this), this._paytableViewController.addEventListener(PaytableView.PAYTABLE_SHOWN, M, this), this._paytableViewController.addEventListener(PaytableView.PAYTABLE_HIDDEN, N, this), this.addChildViewController(this._paytableViewController), this._uiViewController.setUIState(UserInterfaceViewController.STATE_SETTINGS_PAYTABLE), this._uiViewController.activatePaytableButton(!0))
    }
    function Y() { this._paytableViewController ? r.call(this) : this._settingsViewController ? this._settingsViewController.hide() : G.call(this, !0) } function p() {
        var a = GameSettings.getInstance(), b = (a.lineGame ? a.fixedLinesCount ? a.linesCountConfig[a.linesCountConfig.length - 1] : a.linesCountConfig[0] : a.fixedLinesCount ? a.comboCoeficients[a.comboCoeficients.length - 1] : a.comboCoeficients[0]) * a.betValues[0] * a.denominations[0][0], c = (a.lineGame ? a.linesCountConfig[a.linesCountConfig.length - 1] : a.comboCoeficients[a.comboCoeficients.length -
            1]) * a.betValues[a.betValues.length - 1] * a.denominations[a.denominations.length - 1][0], d = a.currencyType, e = {}; a.rtp && (e.rtp = a.rtp); e.currencyType = a.currencyType; e.shouldHideStopAll = 0 < a.minimumSpinTime; e.hasAutoplayLimit = null != a.autoplayLimit && 0 < a.autoplayLimit.length && 0 != a.autoplayLimit[0]; e.hasTotalsInfo = Boolean(a.sendTotalsInfo); e.jackpotAllowed = a.jackpotAllowed; e.lineGame = a.lineGame; e.gameVersion = a.gameVersion; e.currencyDoNotDisplayCredits = a.currencyDoNotDisplayCredits; e.isAutoplayDisabled = null != a.autoplayLimit &&
                0 == a.autoplayLimit[0]; e.vB = a.buildTimestamp; e.minBet = Utils.formatNumber(b, 100, !0) + " " + d; e.maxBet = Utils.formatNumber(c, 100, !0) + " " + d; a.jackpotAllowed && (e.qBets = Utils.formatNumber(a.jackpotMinBet, 100, !0) + " " + d + " - " + Utils.formatNumber(a.jackpotMaxBet, 100, !0) + " " + d); var b = "", f; for (f in e) c = encodeURIComponent(e[f]), b += f + "=" + c + "&"; e = "?" + b; f = 0 > a.helpLanguages.indexOf(a.currLanguage) ? "en" : a.currLanguage;
    }
    function Z() { var a = GameSettings.getInstance(); a.currBetIndex++; a.currBetIndex >= a.betValues.length && (a.currBetIndex = 0); this._uiViewController.setBetMoney(this.bet()); SoundManager.getInstance().play("selectBetSound" + (a.currBetIndex + 1)); null != this._settingsViewController && this._settingsViewController.updateSelectedBet() } function $() {
        var a = GameSettings.getInstance(); a.currDenominationIndex++; a.currDenominationIndex >= a.denominations.length && (a.currDenominationIndex = 0); this._uiViewController.setDenomination(a.denominations[a.currDenominationIndex][0]);
        this._uiViewController.setBetMoney(this.bet()); SoundManager.getInstance().play("spinSound"); null != this._settingsViewController && this._settingsViewController.updateSelectedDenomination()
    } function r() { G.call(this, !1); this._paytableViewController && q.call(this) } function I() { var a = GameSettings.getInstance(); this._uiViewController.setDenomination(a.denominations[a.currDenominationIndex][0]); this._uiViewController.setBetMoney(this.bet()) } function H() { this._uiViewController.setBetMoney(this.bet()) } function J() {
        this._uiViewController.setBetMoney(this.bet());
        this._uiViewController.setLines(GameSettings.getInstance().currLineIndex)
    } function aa() {
        var a = GameSettings.getInstance(), b = a.serverMessage; a.autoplayGame && (b.freeSpins || !a.bonusSpinsModel.hasMoreBonusSpinsToPlay() && a.bonusSpinsModel.isBonusGameStarted || b.jackpot || 0 == a.remainingAutoplays) && (b.jackpot && b.state != BaseMessage.STATE_JACKPOT && b.state != BaseMessage.STATE_FREESPIN && (this._startJackpotAfterWinMoneyAnimation = !0), t.call(this)); this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_EXPAND);
        0 < SpinAnalyzer.getNumWins(b) ? (b.expand.length && !Loader.getLoader(a.expandVideo.src).getData() && s.call(this), l.call(this)) : b.state != BaseMessage.STATE_JACKPOT || a.freespinGame || this._lostConnection ? (b.state == BaseMessage.STATE_IDLE && this._stateMachineContext.collect(), D.call(this), (a.freespinGame || a.autoplayGame) && f.call(this)) : this._stateMachineContext.jackpot(); this._bonusSpinsInfoController && this._bonusSpinsInfoController.reelsStopped()
    } function E() {
        var a = GameSettings.getInstance(), b = a.serverMessage;
        s.call(this); a.processingSubscribe || a.noSoundAndFastLineBlink || (b.freeSpins ? this._uiViewController.setUIState(UserInterfaceViewController.STATE_FREESPINS_TRANSITION) : this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_MONEY_ANIMATION, b.state == BaseMessage.STATE_GAMBLE && !a.autoplayGame)); a.noSoundAndFastLineBlink || this._uiViewController.setWinMoney(b.winAmount, a.processingSubscribe ? !1 : !0, a.processingSubscribe ? 0 : a.autoplayGame ? 2 : 0); this._freespinMusicSoundChannel && (this._freespinMusicSoundChannel.volume.gain.value =
            0.1); if (!this._winVisualizationViewController && (this._winVisualizationViewController = new WinVisualizationViewController, this.addChildViewController(this._winVisualizationViewController), this._winVisualizationViewController.addEventListener(WinVisualizationViewController.ENTER_FREESPINS_SCENARIO_COMPLETE, w, this), this._winVisualizationViewController.start(), this._lostConnection)) this._winVisualizationViewController.onLostConnection()
    } function ba() { GameSettings.getInstance().autoplayGame && f.call(this) }
    function ca() {
        console.log("MONEY COMPLETE"); var a = GameSettings.getInstance(); if (this._stateMachineContext.getState() == StateMachineContext.STATE_WIN) {
            var b = a.serverMessage; this._winVisualizationViewController.allowCreditAnimationSound = !1; b.freeSpins || this._winVisualizationViewController.getCardSoundPlaying() || this._winVisualizationViewController.stopWinSound(); a.freespinGame || b.freeSpins || this._winVisualizationViewController.getCardSoundPlaying() || SoundManager.getInstance().play("moneyAnimationEndSound");
            this._winVisualizationViewController.stopBlinkX2(); if (b.state != BaseMessage.STATE_JACKPOT || a.freespinGame) this._startJackpotAfterWinMoneyAnimation ? (this._startJackpotAfterWinMoneyAnimation = !1, f.call(this)) : (b.freeSpins || this._uiViewController.setUIState(UserInterfaceViewController.STATE_WIN, b.state == BaseMessage.STATE_GAMBLE ? !0 : !1), b.freeSpins || D.call(this), a.autoplayGame ? (c = this, this._autoplayDelayTimer = setTimeout(function () { da.call(c) }, 1E3)) : !b.freeSpins && a.freespinGame && f.call(this)); else {
                this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_TRANSITION);
                k.call(this); g.call(this); var c = this; this._jackpotWaitTimer = setTimeout(function () { c._jackpotWaitTimer = 0; this._lostConnection || c._stateMachineContext.jackpot() }, 1E3)
            }
        } else this._jackpotViewController ? this._jackpotComplete ? (this._jackpotComplete = !1, this.hideJackpot()) : this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_COLLECT_WAIT) : this._stateMachineContext.getState() == StateMachineContext.STATE_JACKPOT ? this._gambleViewController || this._lostConnection || this.showJackpot() : 0 ==
            this._uiViewController.winMoney() && this._bonusSpinsInfoController && this._bonusSpinsInfoController.winMoneyCollectComplete()
    } function w(a) {
        console.log("COMPLETE"); x.call(this); this._uiViewController.completeAnimations(); SoundManager.getInstance().stop(this._freespinMusicSoundChannel); a = GameSettings.getInstance(); var b = a.serverMessage; a.freespinGame ? (a.totalFreespins += b.freeSpins, this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_FREESPINS_ANIMATION), this._freespinAnimationViewController.playRetrigger()) :
            (a.freespinGame = !0, a.currFreespin = 0, a.totalFreespins = b.freeSpins, this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_FREESPINS_START), this._reelsViewController.setFreespinFakeReels(), this._freespinsStartPressed = !1, this._freespinAnimationViewController.playStart())
    } function da() { this._autoplayDelayTimer = 0; f.call(this) } function R() {
        this._stateMachineContext.getState() == StateMachineContext.STATE_GAMBLE ? this._uiViewController.setUIState(UserInterfaceViewController.STATE_GAMBLE) :
        this._stateMachineContext.getState() == StateMachineContext.STATE_IDLE ? this.hideGamble() : this._stateMachineContext.getState() == StateMachineContext.STATE_JACKPOT && (this.hideGamble(), this.getWinMoneyAnimating() || this._lostConnection || this.showJackpot())
    } function ea(a) { console.log("BLINK COMPLETE"); var b = [!1, !1, !1, !1]; b[a.data.index] = !0; this._uiViewController.setJackpotValues(GameSettings.getInstance().jackpotValues, b, [!1, !1, !1, !1]) } function S(a) {
        var b = GameSettings.getInstance(); a = b.serverMessage; if (-1 !=
            a.winLevel) {
                var c = SoundManager.getInstance(), d; 0 == a.winLevel ? d = JackpotView.LEVEL1_ANIMATION_TIME : 1 == a.winLevel ? d = JackpotView.LEVEL2_ANIMATION_TIME : 2 == a.winLevel ? d = JackpotView.LEVEL3_ANIMATION_TIME : 3 == a.winLevel && (d = JackpotView.LEVEL4_ANIMATION_TIME); this._uiViewController.setWinMoney(a.winAmount, !0, d); this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_JACKPOT_MONEY_ANIMATION); b = b.jackpotValues.slice(); b[a.winLevel] = 0; var e = [!1, !1, !1, !1]; e[a.winLevel] = !0; var f = [!1, !1, !1,
                !1]; f[a.winLevel] = !0; this._uiViewController.freezeJackpotValue(-1); this._uiViewController.setJackpotValues(b, e, f, d); this._uiViewController.freezeJackpotValue(a.winLevel); this._jackpotMusicSoundChannel = c.stop(this._jackpotMusicSoundChannel); this._jackpotMusicRequested = !1; this._jackpotWinSoundChannel = c.play("jackpotWinSound" + (a.winLevel + 1), !0); this._jackpotWinSoundChannel || (this._jackpotWinSoundRequested = "jackpotWinSound" + (a.winLevel + 1))
        }
    } function K() { } function L() {
        O.call(this); GameSettings.getInstance().autoplayGame &&
            f.call(this)
    } function M() { this._settingsViewController && (this._settingsViewController.dispose(), this._settingsViewController = null, this._uiViewController.setZIndexesForSettingsHidden()) } function N() { q.call(this); this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE) } function T() { this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT); this._jackpotMusicSoundChannel = SoundManager.getInstance().play("jackpotBackgroundSound", !0); this._jackpotMusicRequested = !this._jackpotMusicSoundChannel }
    function y(a) { f.call(this) } function z(a) {
        a = GameSettings.getInstance(); if (a.freespinGame) g.call(this), k.call(this), this._uiViewController.bonusspins(!1), this._uiViewController.freespins(!0); else if (this._uiViewController.freespins(!1), a.bonusSpinsModel.isBonusGameStarted && (this._uiViewController.bonusspins(!0), this._uiViewController.updateBonusSpins()), this._freespinsSpinMessage) {
            g.call(this); k.call(this, !1); this._reelsViewController.setReels(this._freespinsSpinMessage.reels); var b = a.serverMessage;
            b.reels = this._freespinsSpinMessage.reels.slice(); b.lines = this._freespinsSpinMessage.lines.slice(); b.scatters = this._freespinsSpinMessage.scatters.slice(); b.expand = this._freespinsSpinMessage.expand.slice(); b.state == BaseMessage.STATE_GAMBLE ? (a.noSoundAndFastLineBlink = !0, l.call(this)) : s.call(this); this._freespinsSpinMessage = null
        }
    } function A(a) { m.call(this); this._lostConnection || (this._freespinMusicSoundChannel = SoundManager.getInstance().play("freeSpinsBackgroundSound", !0), f.call(this)) } function B(a) {
        m.call(this);
        this._lostConnection || (this._freespinMusicSoundChannel = SoundManager.getInstance().play("freeSpinsBackgroundSound", !0), f.call(this))
    } function C(a) {
        a = GameSettings.getInstance().serverMessage; m.call(this); SoundManager.getInstance().stop(this._freespinMusicSoundChannel); this._bonusSpinsInfoController && 0 == a.winAmount && this._bonusSpinsInfoController.freespinOutroEnded(); a.state != BaseMessage.STATE_JACKPOT && (0 < a.winAmount ? this._uiViewController.setUIState(UserInterfaceViewController.STATE_WIN, a.state == BaseMessage.STATE_GAMBLE) :
            this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE)); this._lostConnection || a.state == BaseMessage.STATE_JACKPOT && this._stateMachineContext.jackpot()
    } function fa() {
        var a = GameSettings.getInstance(); this._currentState.state == BaseMessage.STATE_FREESPIN && 0 != this._currentState.freespinsUsed && (a.freespinGame = !0, a.currFreespin = this._currentState.freespinsUsed, a.totalFreespins = this._currentState.freeSpins + this._currentState.freespinsUsed, this._uiViewController.freespins(!0), this._freespinsStartPressed =
            !0, this._freespinMusicSoundChannel = SoundManager.getInstance().play("freeSpinsBackgroundSound", !0), f.call(this))
    } function u() { console.log("LOAD SOUNDS"); this._soundPopUp.removeEventListener(PopUp.BUTTON1_CLICK, u, this); this._soundPopUp.removeEventListener(PopUp.BUTTON2_CLICK, v, this); this._soundPopUp.dispose(); this._soundPopUp = null; GameSettings.getInstance(); var a = SoundManager.getInstance(); a.playDummySound(Loader.getLoader("common/commonSounds/dummy.mp3").getData()); a.loadAll(); a.toggleMute() } function v() {
        this._soundPopUp.removeEventListener(PopUp.BUTTON1_CLICK,
            u, this); this._soundPopUp.removeEventListener(PopUp.BUTTON2_CLICK, v, this); this._soundPopUp.dispose(); this._soundPopUp = null; SoundManager.getInstance().playDummySound(Loader.getLoader("common/commonSounds/dummy.mp3").getData()); this._uiViewController.updateTopSoundButton()
    } function ga(a) {
        4 == a.data.soundIndex && (a = SoundManager.getInstance(), this._jackpotMusicRequested && (this._jackpotMusicSoundChannel = a.play("jackpotBackgroundSound", !0)), this._jackpotWinSoundRequested && (this._jackpotWinSoundChannel = a.play(this._jackpotWinSoundRequested,
            !0)))
    } function ha(a) {
        a = GameSettings.getInstance(); a.currBetIndex = a.bonusSpinsModel.betIndex(); a.currDenominationIndex = a.bonusSpinsModel.denomIndex(); a.currLineIndex = a.bonusSpinsModel.lineIndex(); a.bonusSpinsModel.isBonusGameStarted = !0; a.bonusSpinsModel.resetTotalWinAmount(); this._uiViewController.setDenomination(a.denominations[a.currDenominationIndex][0]); this._uiViewController.setBetMoney(a.betValues[a.currBetIndex] * a.denominations[a.currDenominationIndex][0] * (a.lineGame ? a.linesCountConfig[a.currLineIndex] :
            a.comboCoeficients[a.currLineIndex])); this._uiViewController.setLines(a.currLineIndex); this._uiViewController.bonusspins(!0); this._uiViewController.updateBonusSpins(); this._uiViewController.waitingForBonusStart = !0
    } function ia(a) { this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE); this._uiViewController.waitingForBonusStart = !1 } function ja(a) {
        a = GameSettings.getInstance(); this._uiViewController.bonusspins(!1); a.bonusSpinsModel.isBonusGameStarted = !1; a.bonusSpinsModel.hasBonusGameEnded =
            !0
    } function ka(a) { this.removeChildViewController(this._bonusSpinsInfoController); this._bonusSpinsInfoController.dispose(); this._bonusSpinsInfoController = null; this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE) } return {
        init: function (a, b) {
            this._reelsViewController; this._uiViewController; this._winVisualizationViewController; this._videoViewController; this._gambleViewController; this._jackpotViewController; this._settingsViewController; this._paytableViewController; this._freespinAnimationViewController;
            this._customResultViewController; this._bonusSpinsInfoController; this._soundPopUp; this._lostConnection = !1; this._stateMachineContext; this._startRequested = !1; this._autoplayDelayTimer; this._collectReceived = !0; this._startJackpotAfterWinMoneyAnimation = !1; this._jackpotWaitTimer; this._jackpotComplete = !1; this._jackpotMusicSoundChannel; this._jackpotMusicRequested = !1; this._jackpotWinSoundChannel; this._jackpotWinSoundRequested = !1; this._freespinsSpinMessage = null; this._freespinsStartPressed = !1; this._currentState =
                a; this._freespinMusicSoundChannel; this._super(); this._view = new View(""); this._view.setSize(1280, 720); this._totalsInfoView = b; h.call(this); var c = GameSettings.getInstance(), d = SoundManager.getInstance(); d.isSupported() && (c.jackpotAllowed || c.soundsInfo.splice(4, 1), d.setSounds(c.soundsInfo), d.addEventListener(SoundManager.SOUND_LOADED, ga, this), this._soundPopUp = new PopUp("Play Sounds?", "", "Yes", "No"), this._soundPopUp.addEventListener(PopUp.BUTTON1_CLICK, u, this), this._soundPopUp.addEventListener(PopUp.BUTTON2_CLICK,
                    v, this), this._soundPopUp.setButtonIds("SoundPopUpYesButton", "SoundPopUpNoButton")); this._reelsViewController = new ReelsViewController(a.reels); this._reelsViewController.addEventListener(ReelsViewController.REELS_STOPPED, aa, this); this._uiViewController = new UserInterfaceViewController; this._uiViewController.setBalanceMoney(c.balance); this._uiViewController.setWinMoney(0, !1); this._uiViewController.setBetMoney(this.bet()); this._uiViewController.setDenomination(c.denominations[c.currDenominationIndex][0]);
            this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE); this._uiViewController.addEventListener(UserInterfaceViewController.SPIN_BUTTON_CLICK, f, this); this._uiViewController.addEventListener(UserInterfaceViewController.STOP_BUTTON_CLICK, V, this); this._uiViewController.addEventListener(UserInterfaceViewController.COLLECT_BUTTON_CLICK, W, this); this._uiViewController.addEventListener(UserInterfaceViewController.GAMBLE_BUTTON_CLICK, X, this); this._uiViewController.addEventListener(UserInterfaceViewController.STOP_AUTOPLAY_BUTTON_CLICK,
                t, this); this._uiViewController.addEventListener(UserInterfaceViewController.HOME_BUTTON_CLICK, U, this); this._uiViewController.addEventListener(UserInterfaceViewController.SETTINGS_BUTTON_CLICK, Y, this); this._uiViewController.addEventListener(UserInterfaceViewController.PAYTABLE_BUTTON_CLICK, n, this); this._uiViewController.addEventListener(UserInterfaceViewController.HELP_BUTTON_CLICK, p, this); this._uiViewController.addEventListener(UserInterfaceViewController.BET_BUTTON_CLICK, Z, this); this._uiViewController.addEventListener(UserInterfaceViewController.DENOM_BUTTON_CLICK,
                    $, this); this._uiViewController.addEventListener(UserInterfaceViewController.AUTOPLAY_BUTTON_CLICK, ba, this); this._uiViewController.addEventListener(JackpotBoxes.JACKPOT_BLINK_COMPLETE, ea, this); this._uiViewController.addEventListener(UserInterfaceView.WIN_MONEY_ANIMATED, ca, this); c.customResult && (this._customResultViewController = new CustomResultViewController); this.addChildViewController(this._uiViewController); this.addChildViewController(this._reelsViewController); this._customResultViewController &&
                        this.addChildViewController(this._customResultViewController); this._soundPopUp && this._view.addChild(this._soundPopUp); this._uiViewController.setGameNumber(-1 == a.gameNumber ? 0 : a.gameNumber); c.processingSubscribe = !0; d = StateMachineContext.STATE_IDLE; a.state == BaseMessage.STATE_IDLE ? (c.serverMessage = new CollectMessage(a.state), this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE)) : a.state == BaseMessage.STATE_GAMBLE ? (d = 0 == a.gamblesUsed ? StateMachineContext.STATE_WIN : StateMachineContext.STATE_GAMBLE,
                            c.serverMessage = new SpinMessage(a.reels, a.lines, a.scatters, a.expand, a.winAmount, a.gambleAttemptsLeft, a.jackpot, a.freeSpins, null, a.freespinScatters, a.gameNumber, a.state), this._uiViewController.setUIState(UserInterfaceViewController.STATE_WIN, !0), this._uiViewController.setWinMoney(a.winAmount, !1), c.historyCards = a.previousGambles.slice(), 0 == a.gamblesUsed ? l.call(this) : (this.showGamble(!1), c.serverMessage = new GambleMessage(a.previousGambles[0], a.winAmount, a.gambleAttemptsLeft, a.jackpot, a.state))) : a.state ==
                                BaseMessage.STATE_FREESPIN ? (d = StateMachineContext.STATE_WIN, c.serverMessage = new SpinMessage(a.reels, a.lines, a.scatters, a.expand, a.winAmount, a.gambleAttemptsLeft, a.jackpot, 0 == a.freespinsUsed ? a.freeSpins : 0, a.freeSpinsPerLine, a.freespinScatters, a.gameNumber, a.state), this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_FREESPINS_START), this._uiViewController.setWinMoney(a.winAmount, !1), this._reelsViewController.setFreespinFakeReels(), a.firstSpin && c.restoreReels && (this._freespinsSpinMessage =
                                    new SpinMessage(a.firstSpin.reels.slice(), a.firstSpin.lines ? a.firstSpin.lines.slice() : a.firstSpin.combos.slice(), a.firstSpin.scatters.slice(), a.firstSpin.expand.slice(), 0, 0, !1, 0, null, [], 0, "")), 0 == a.freespinsUsed && l.call(this)) : a.state == BaseMessage.STATE_JACKPOT && (d = StateMachineContext.STATE_JACKPOT, c.serverMessage = new CollectMessage(BaseMessage.STATE_JACKPOT), this._jackpotMusicSoundChannel = SoundManager.getInstance().play("jackpotBackgroundSound", !0), this._jackpotMusicRequested = !this._jackpotMusicSoundChannel,
                                        this.showJackpot(a.jackpotGameState)); c.bonusSpinsModel.hasMoreBonusSpinsToPlay() && (this._bonusSpinsInfoController = new BonusSpinsInfoController, this._bonusSpinsInfoController.addEventListener(BonusSpinsInfoController.BONUS_SPINS_START_MESSAGE_SHOWN, ha, this), this._bonusSpinsInfoController.addEventListener(BonusSpinsInfoController.BONUS_SPINS_START_MESSAGE_HIDDEN, ia, this), this._bonusSpinsInfoController.addEventListener(BonusSpinsInfoController.BONUS_SPINS_END_MESSAGE_SHOWN, ja, this), this._bonusSpinsInfoController.addEventListener(BonusSpinsInfoController.BONUS_SPINS_END_MESSAGE_HIDDEN,
                                            ka, this), this.addChildViewController(this._bonusSpinsInfoController), this._bonusSpinsInfoController.checkInitialState()); this._stateMachineContext = new StateMachineContext(d, this); this._view.addEventListener(Event.ADDED_TO_STAGE, fa, this); var e = this._reelsViewController; (function la() { e.newFrame(1); requestAnimFrame(la, {}) })(); var g = this; setTimeout(function () { g._uiViewController.setBalanceMoney(c.balance) }, 0)
        }, bet: function () {
            var a = GameSettings.getInstance(); return a.bonusSpinsModel.isBonusGameStarted &&
                a.bonusSpinsModel.hasMoreBonusSpinsToPlay() ? 0 : a.betValues[a.currBetIndex] * a.denominations[a.currDenominationIndex][0] * (a.lineGame ? a.linesCountConfig[a.currLineIndex] : a.comboCoeficients[a.currLineIndex]) / a.betForLines
        }, getWinMoneyAnimating: function () { return this._uiViewController.getWinMoneyAnimating() }, spinReceived: function () {
            var a = GameSettings.getInstance(), b = a.serverMessage; this._totalsInfoView && this._totalsInfoView.updateTotalBet(a.totalBet); a.bonusSpinsModel.pendingWinAmount(b.winAmount); b.freeSpins &&
                !this._freespinsSpinMessage && a.restoreReels && (this._freespinsSpinMessage = new SpinMessage(b.reels, b.lines, b.scatters, b.expand, 0, 0, !1, 0, null, [], 0, "")); this._uiViewController.setGameNumber(b.gameNumber); this._reelsViewController.resultReceived()
        }, collectReceived: function () {
            this._collectReceived = !0; h.call(this); if (this._stateMachineContext.getState() == StateMachineContext.STATE_JACKPOT) this.getWinMoneyAnimating() || this.showJackpot(); else {
                var a = GameSettings.getInstance(); this._startRequested ? (this._startRequested =
                    !1, a.balance < this.bet() ? this.setTerminalInsufficientBalanceVisualState() : (this._uiViewController.setBalanceMoney(a.balance - this.bet()), a.customResult ? null != this._customResultViewController.getResult() && a.balance >= this.bet() ? (this._stateMachineContext.setResult(), this._startRequested = !0) : this._stateMachineContext.spin() : this._stateMachineContext.spin())) : this._uiViewController.getUIState() != UserInterfaceViewController.STATE_INSUFFICIENT_FUNDS && this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE)
            }
        },
        gambleReceived: function () { if (!this._gambleViewController) throw "Gamble result received but the gamble view is not open!"; this._gambleViewController.setResult(); var a = GameSettings.getInstance().serverMessage; this._uiViewController.setWinMoney(a.winAmount, !0, 1); GameSettings.getInstance().bonusSpinsModel.pendingWinAmount(a.winAmount) }, jackpotReceived: function () {
            if (!this._jackpotViewController) throw "Jackpot result received but the jackpot view is not open!"; var a = GameSettings.getInstance(), b = a.serverMessage;
            if (-1 != b.winLevel) { a = a.jackpotValues.slice(); a[b.winLevel] = b.winAmount; var c = [!1, !1, !1, !1]; c[b.winLevel] = !0; this._uiViewController.stopJackpotBlink(b.winLevel); this._uiViewController.setJackpotValues(a, c); this._uiViewController.freezeJackpotValue(b.winLevel) } this._jackpotViewController.setResult()
        }, customResultReceived: function () { if (this._startRequested) { var a = GameSettings.getInstance(); a.freespinGame || this._uiViewController.setBalanceMoney(a.balance - this.bet()); this._startRequested = !1; this._stateMachineContext.spin() } },
        sendSpin: function () { var a = GameSettings.getInstance(); this.dispatchEvent(new Event(SlotEngineMain.SPIN, { bet: a.betValues[a.currBetIndex] * a.denominations[a.currDenominationIndex][0], denomination: a.denominations[a.currDenominationIndex][0], lines: a.lineGame ? a.linesCountConfig[a.currLineIndex] : a.comboCoeficients[a.currLineIndex], bonus: a.freespinGame, gameCommand: BaseMessage.COMMAND_SPIN })) }, sendCollect: function () { this._collectReceived = !1; this.dispatchEvent(new Event(SlotEngineMain.COLLECT, { gameCommand: BaseMessage.COMMAND_COLLECT })) },
        sendGamble: function () { this.dispatchEvent(new Event(SlotEngineMain.GAMBLE, { gameCommand: BaseMessage.COMMAND_GAMBLE, color: GameSettings.getInstance().gambleChoice })) }, sendJackpot: function () { this.dispatchEvent(new Event(SlotEngineMain.JACKPOT, { gameCommand: BaseMessage.COMMAND_JACKPOT, pos: this._jackpotViewController.getCardPos() })) }, sendCustomResult: function () {
            if (GameSettings.getInstance().customResult) {
                var a = this._customResultViewController.getResult(); a && (a.gameCommand = BaseMessage.COMMAND_SET_RESULT);
                this.dispatchEvent(new Event(SlotEngineMain.SET_RESULT, a))
            } else throw 'Trying to set custom result but "customResult" flag is set to false!';
        }, setIdleVisualState: function () { var a = GameSettings.getInstance(), b = a.serverMessage, b = b.state == BaseMessage.STATE_GAMBLE ? b.winAmount : 0; this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE); a.freespinGame || (this._uiViewController.setBalanceMoney(a.balance + b, !0, 1), this._uiViewController.setWinMoney(0, !0, 1), h.call(this)); g.call(this); k.call(this) },
        setInsufficientBalanceVisualState: function () { var a = GameSettings.getInstance(), b = a.serverMessage, b = b.state == BaseMessage.STATE_GAMBLE ? b.winAmount : 0; this._uiViewController.setUIState(UserInterfaceViewController.STATE_INSUFFICIENT_FUNDS); this._uiViewController.setBalanceMoney(a.balance + b); this._uiViewController.setWinMoney(0, !1); h.call(this); g.call(this); k.call(this); this._startRequested = !1 }, setTerminalInsufficientBalanceVisualState: function () {
            this._uiViewController.setUIState(UserInterfaceViewController.STATE_TERMINAL_INSUFFICIENT_FUNDS);
            this._uiViewController.setBalanceMoney(GameSettings.getInstance().balance); h.call(this)
        }, setWaitingForSpinResultVisualState: function () {
            if (!this._reelsViewController.getReelsRotating()) {
                var a = GameSettings.getInstance(), b = a.serverMessage, b = b.state == BaseMessage.STATE_GAMBLE ? b.winAmount : 0; a.autoplayGame && 0 < a.remainingAutoplays && a.remainingAutoplays--; this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_SPIN_RESULT); a.freespinGame ? (this._freespinMusicSoundChannel && (this._freespinMusicSoundChannel.volume.gain.value =
                    1), a.currFreespin++, this._uiViewController.updateFreespins()) : (this._uiViewController.setBalanceMoney(a.balance + b - this.bet()), this._uiViewController.setWinMoney(0, !1), h.call(this), a.bonusSpinsModel.increaseCurrentBonusSpin(), a.bonusSpinsModel.addPendingWinAmount(), this._uiViewController.updateBonusSpins()); g.call(this); k.call(this, !1); this._reelsViewController.start()
            }
        }, setWaitingForCollectVisualState: function () {
            var a = GameSettings.getInstance(), b = a.serverMessage, b = b.state == BaseMessage.STATE_GAMBLE ?
                b.winAmount : 0; this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_COLLECT); a.freespinGame || (this._uiViewController.setBalanceMoney(a.balance + b, !0, 1), this._uiViewController.setWinMoney(0, !0, 1)); g.call(this); k.call(this)
        }, setWaitingForGambleResultVisualState: function () { this._uiViewController.setUIState(UserInterfaceViewController.STATE_WAITING_FOR_GAMBLE_RESULT) }, setBalance: function () {
            var a = GameSettings.getInstance(), b = a.serverMessage; b.state == BaseMessage.STATE_IDLE || b.state ==
                BaseMessage.STATE_JACKPOT ? this._uiViewController.setBalanceMoney(a.balance - b.winAmount) : this._uiViewController.setBalanceMoney(a.balance)
        }, onServerResponse: function () { this._stateMachineContext.onResult() }, onSlideEvent: function (a) { this._soundPopUp || "start" == a.type && "up" == a.direction && this._customResultViewController && !this._paytableViewController && this._customResultViewController.toggleShowHide() }, onJackpotValuesUpdated: function (a, b, c) {
            var d = GameSettings.getInstance().jackpotValues.slice(); console.log("j1: " +
                d[0] + " j2: " + d[1] + " j3: " + d[2] + " j4: " + d[3]); var e = [!0, !0, !0, !0]; -1 != a ? (e[a] = !1, d[a] = c, this._uiViewController.stopJackpotBlink(a), this._uiViewController.setJackpotValues(d, [!0, !0, !0, !0], e, 5.3), this._uiViewController.setJackpotWinScreenName(a, b)) : this._uiViewController.setJackpotValues(d, [!0, !0, !0, !0], e, 5.3)
        }, onResponsibleGamingEvent: function (a) { GameSettings.getInstance().autoplayGame && t.call(this) }, onResponsibleGamingCompleteEvent: function () { }, onLostConnection: function () {
            var a = GameSettings.getInstance();
            this._lostConnection = !0; this._uiViewController.setBalanceMoney(a.balance); this._uiViewController.onLostConnection(); if (this._winVisualizationViewController) this._winVisualizationViewController.onLostConnection(); h.call(this)
        }, showGamble: function (a) {
            void 0 == a && (a = !0); this._gambleViewController || (a && SoundManager.getInstance().play("gambleOpenSound"), this._gambleViewController = new GambleViewController, this._gambleViewController.addEventListener(GambleView.GAMBLE_RED_BLACK_BUTTON_CLICK, P, this), this._gambleViewController.addEventListener(GambleView.GAMBLE_RESULT_SHOWN,
                R, this), this.addChildViewController(this._gambleViewController), this._uiViewController.setUIState(UserInterfaceViewController.STATE_GAMBLE), g.call(this), k.call(this))
        }, hideGamble: function () {
            if (this._gambleViewController) {
                var a = GameSettings.getInstance(), b = a.serverMessage; h.call(this); b.winAmount ? SoundManager.getInstance().play("collectSound") : this._bonusSpinsInfoController && this._bonusSpinsInfoController.gambleCompleted(); this._gambleViewController.removeEventListener(GambleView.GAMBLE_RED_BLACK_BUTTON_CLICK,
                    P, this); this._gambleViewController.removeEventListener(GambleView.GAMBLE_RESULT_SHOWN, R, this); this.removeChildViewController(this._gambleViewController); this._gambleViewController.dispose(); this._gambleViewController = null; var c = b.state == BaseMessage.STATE_GAMBLE ? b.winAmount : 0, d = a.balance + c > this._uiViewController.balanceMoney(); this._uiViewController.setBalanceMoney(a.balance + c, d, 1); this._uiViewController.setWinMoney(0, d, 1); b.jackpot ? this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_TRANSITION) :
                        this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE)
            }
        }, showJackpot: function (a) {
            if (!this._jackpotViewController) {
                h.call(this); var b = !1; void 0 == a && (b = !0, a = {}); this._uiViewController.setUIState(UserInterfaceViewController.STATE_JACKPOT_TRANSITION); this._jackpotViewController = new JackpotViewController(a, b); this._jackpotViewController.addEventListener(JackpotView.JACKPOT_SHOWN, T, this); this._jackpotViewController.addEventListener(JackpotView.JACKPOT_CARD_CLICK, Q, this); this._jackpotViewController.addEventListener(JackpotViewController.JACKPOT_RESULT_SHOWN,
                    S, this); this.addChildViewController(this._jackpotViewController); this._jackpotViewController.show(); this._uiViewController.setBalanceMoney(GameSettings.getInstance().balance); this._uiViewController.setWinMoney(0, !1); g.call(this)
            }
        }, hideJackpot: function () {
            if (this._jackpotViewController) {
                this._bonusSpinsInfoController && this._bonusSpinsInfoController.jackpotCompleted(); h.call(this); var a = GameSettings.getInstance(), b = a.serverMessage; this.removeChildViewController(this._jackpotViewController); this._jackpotViewController.removeEventListener(JackpotView.JACKPOT_SHOWN,
                    T, this); this._jackpotViewController.removeEventListener(JackpotView.JACKPOT_CARD_CLICK, Q, this); this._jackpotViewController.removeEventListener(JackpotViewController.JACKPOT_RESULT_SHOWN, S, this); this._jackpotViewController.dispose(); this._jackpotViewController = null; this._uiViewController.setUIState(UserInterfaceViewController.STATE_IDLE); this._uiViewController.freezeJackpotValue(-1); var c = [!1, !1, !1, !1]; c[b.winLevel] = !0; this._uiViewController.setJackpotValues(a.jackpotValues, c)
            }
        }
    }
}());
